{"version":3,"sources":["logo.svg","Components/Conversor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Conversor","props","state","moedaA_valor","moedaB_valor","insereMoedaA","bind","converter","de_para","this","moedaA","moedaB","url","fetch","then","res","json","cotacao","val","parseFloat","toFixed","setState","e","target","value","className","type","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,0KCGtBC,G,kBAEjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTC,aAAc,GACdC,aAAc,GAIlB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAVH,E,yEAcN,IAAD,OACHE,EAAO,UAAMC,KAAKR,MAAMS,OAAjB,YAA2BD,KAAKR,MAAMU,QAC7CC,EAAG,qDAAiDJ,EAAjD,0CAEPK,MAAMD,GAAKE,KAAK,SAAAC,GACZ,OAAOA,EAAIC,SACZF,KAAK,SAAAE,GACJ,IAAIC,EAAUD,EAAKR,GAASU,IACxBd,EAAgBe,WAAW,EAAKjB,MAAMC,aAAec,GAAUG,QAAQ,GAE3E,EAAKC,SAAS,CACVjB,qB,mCAKCkB,GACTb,KAAKY,SAAS,CACVlB,aAAcmB,EAAEC,OAAOC,U,+BAK3B,OACI,yBAAKC,UAAU,aACX,4BAAKhB,KAAKR,MAAMS,OAAhB,SAA8BD,KAAKR,MAAMU,QACzC,2BAAOe,KAAK,OAAOC,SAAUlB,KAAKJ,eAClC,2BAAOqB,KAAK,SAASE,QAASnB,KAAKF,UAAWiB,MAAM,cACpD,4BAAKf,KAAKP,MAAME,mB,GA5COyB,cCsBxBC,MApBf,WACE,OACE,yBAAKL,UAAU,OACb,mDACA,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAWf,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,SAEjC,yBAAKc,UAAU,SACb,kBAAC,EAAD,CAAWf,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,SAEjC,yBAAKc,UAAU,SACb,kBAAC,EAAD,CAAWf,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,WCPnBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.d2b2a86b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport \"./Conversor.css\";\r\n\r\nexport default class Conversor extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            moedaA_valor: \"\",\r\n            moedaB_valor: 0\r\n        };\r\n\r\n        //Definido funções\r\n        this.insereMoedaA = this.insereMoedaA.bind(this);\r\n        this.converter = this.converter.bind(this);\r\n\r\n    }\r\n    \r\n    converter(){\r\n        let de_para = `${this.props.moedaA}_${this.props.moedaB}`;\r\n        let url = `https://free.currconv.com/api/v7/convert?q=${de_para}&compact=y&apiKey=474e0aaad5e43d4de67a`;\r\n\r\n        fetch(url).then(res => {\r\n            return res.json();\r\n        }).then(json=> {\r\n            let cotacao = json[de_para].val;\r\n            let moedaB_valor = (parseFloat(this.state.moedaA_valor * cotacao)).toFixed(2);\r\n\r\n            this.setState({\r\n                moedaB_valor\r\n            });\r\n        });\r\n    }\r\n\r\n    insereMoedaA(e){\r\n        this.setState({\r\n            moedaA_valor: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"conversor\">\r\n                <h2>{this.props.moedaA} para {this.props.moedaB}</h2>\r\n                <input type=\"text\" onChange={this.insereMoedaA}></input>\r\n                <input type=\"button\" onClick={this.converter} value=\"Converter\"></input>\r\n                <h2>{this.state.moedaB_valor}</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Conversor from \"./Components/Conversor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conversor de moedas</h1>\n      <div className=\"linha\">\n        <Conversor moedaA=\"USD\" moedaB=\"BRL\"></Conversor>\n        <Conversor moedaA=\"BRL\" moedaB=\"USD\"></Conversor>\n      </div>\n      <div className=\"linha\">\n        <Conversor moedaA=\"CAD\" moedaB=\"BRL\"></Conversor>\n        <Conversor moedaA=\"BRL\" moedaB=\"CAD\"></Conversor>\n      </div>\n      <div className=\"linha\">\n        <Conversor moedaA=\"EUR\" moedaB=\"BRL\"></Conversor>\n        <Conversor moedaA=\"BRL\" moedaB=\"EUR\"></Conversor>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}